/* eslint-disable */
// Generated from docs/schema/manifest.json. Do not edit manually.
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * JSON Schema describing node parameters/results.
 */
export type JsonSchema =
  | {
      [k: string]: unknown;
    }
  | boolean;

export interface PackageManifest {
  /**
   * Manifest schema version (semver).
   */
  schemaVersion: string;
  /**
   * Package identifier (lowercase with dots/underscores).
   */
  name: string;
  /**
   * Package version in semver format.
   */
  version: string;
  /**
   * Short summary of the package.
   */
  description: string;
  /**
   * Adapter modules exposed by the package.
   *
   * @minItems 1
   */
  adapters: [Adapter, ...Adapter[]];
  python: PythonConfig;
  /**
   * Node definitions surfaced to the builder and scheduler.
   *
   * @minItems 1
   */
  nodes: [Node, ...Node[]];
  /**
   * Static assets bundled with the package.
   */
  resources?: Resource[];
  hooks?: Hooks;
  signature?: Signature;
}
export interface Adapter {
  /**
   * Unique adapter name within the package.
   */
  name: string;
  /**
   * Python module path containing adapter handlers.
   */
  entrypoint: string;
  /**
   * Capabilities registered by this adapter (used for dispatch).
   *
   * @minItems 1
   */
  capabilities: [string, ...string[]];
  /**
   * Adapter level description.
   */
  description?: string;
  /**
   * Idempotency guarantees of the adapter (e.g. per_request).
   */
  idempotency?: string;
  /**
   * Additional adapter specific metadata.
   */
  metadata?: {
    [k: string]: unknown;
  };
}
export interface PythonConfig {
  /**
   * Python version requirement specifier.
   */
  requires: string;
  /**
   * Pip requirement specifiers installed during package setup.
   */
  dependencies?: string[];
}
export interface Node {
  /**
   * Fully qualified node type (package scoped).
   */
  type: string;
  /**
   * Lifecycle state of the node.
   */
  status: 'draft' | 'published' | 'deprecated';
  /**
   * Grouping category displayed in the builder palette.
   */
  category: string;
  /**
   * Human readable label rendered in the palette and inspector.
   */
  label: string;
  /**
   * Extended description of the node behaviour.
   */
  description?: string;
  /**
   * Free-form tags for searching/filtering.
   */
  tags?: string[];
  /**
   * Adapter name responsible for the node implementation.
   */
  adapter: string;
  /**
   * Handler callable exposed by the adapter.
   */
  handler: string;
  /**
   * Optional static configuration forwarded to the handler.
   */
  config?: {
    [k: string]: unknown;
  };
  schema: JsonSchema;
  ui?: NodeUI;
}
export interface NodeUI {
  inputPorts?: Port[];
  widgets?: Widget[];
}
export interface Port {
  /**
   * Stable identifier for the port.
   */
  key: string;
  /**
   * Display label for the port.
   */
  label: string;
  binding: Binding;
}
export interface Binding {
  /**
   * JSON pointer style path targeted by the binding.
   */
  path: string;
  /**
   * Binding mode that describes read/write behaviour.
   */
  mode?: 'read' | 'write' | 'two_way';
}
export interface Widget {
  /**
   * Unique widget key.
   */
  key: string;
  /**
   * Widget label.
   */
  label: string;
  /**
   * Component type rendered by the dashboard.
   */
  component: string;
  binding: Binding;
  /**
   * Component options (schema depends on component).
   */
  options?: {
    [k: string]: unknown;
  };
}
export interface Resource {
  /**
   * Relative path to the bundled resource.
   */
  path: string;
  /**
   * Resource type (download, archive, script, etc.).
   */
  type: string;
  /**
   * Optional checksum of the resource content.
   */
  sha256?: string;
}
export interface Hooks {
  /**
   * Scripts executed during install.
   */
  install?: string[];
  /**
   * Scripts executed during uninstall.
   */
  uninstall?: string[];
}
export interface Signature {
  /**
   * SHA-256 hash of the archive or manifest.
   */
  sha256?: string;
  /**
   * Timestamp when the manifest was signed.
   */
  signedAt?: string;
  /**
   * Identity of the signer.
   */
  signedBy?: string;
}
