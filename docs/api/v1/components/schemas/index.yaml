RunStartRequest:
  type: object
  required: [workflow, clientId]
  properties:
    workflow:
      $ref: '#/Workflow'
    clientId:
      type: string
      description: Caller-provided client instance id
RunRef:
  type: object
  required: [runId, status, definitionHash, clientId, createdAt]
  properties:
    runId: { type: string }
    status: { $ref: '#/RunStatus' }
    definitionHash: { type: string }
    clientId: { type: string }
    createdAt: { type: string, format: date-time }
Run:
  type: object
  required: [runId, status, definitionHash, clientId]
  properties:
    runId: { type: string }
    status: { $ref: '#/RunStatus' }
    definitionHash: { type: string }
    clientId: { type: string }
    startedAt: { type: string, format: date-time, nullable: true }
    finishedAt: { type: string, format: date-time, nullable: true }
    error: { $ref: '#/ResultError', nullable: true }
    artifacts:
      $ref: '#/RunArtifactList'
      nullable: true
    nodes:
      $ref: '#/RunNodesList'
      nullable: true
RunStatus:
  type: string
  enum: [queued, running, succeeded, failed, cancelled]
RunList:
  type: object
  required: [items]
  properties:
    items:
      type: array
      items: { $ref: '#/Run' }
    nextCursor:
      type: string
      nullable: true
RunArtifact:
  type: object
  required: [resourceId, workerId, type]
  properties:
    resourceId: { type: string }
    workerId: { type: string }
    type: { type: string }
    sizeBytes: { type: integer, minimum: 0, nullable: true }
    inline: { type: boolean, nullable: true }
    expiresAt: { type: string, format: date-time, nullable: true }
    metadata:
      type: object
      additionalProperties: true
      nullable: true
RunArtifactList:
  type: array
  items: { $ref: '#/RunArtifact' }
RunNodeStatus:
  type: object
  required: [nodeId, taskId, status]
  properties:
    nodeId: { type: string }
    taskId: { type: string }
    status: { $ref: '#/RunStatus' }
    workerId: { type: string, nullable: true }
    startedAt: { type: string, format: date-time, nullable: true }
    finishedAt: { type: string, format: date-time, nullable: true }
    seq: { type: integer, nullable: true }
    pendingAck:
      type: boolean
      nullable: true
      description: True when the scheduler has dispatched the node and is waiting for a worker ACK.
    dispatchId:
      type: string
      nullable: true
      description: Envelope id of the last cmd.dispatch frame for this node.
    ackDeadline:
      type: string
      format: date-time
      nullable: true
      description: Scheduler-side deadline for receiving the ACK for the last dispatch.
    resourceRefs:
      type: array
      items:
        type: object
        additionalProperties: true
    affinity:
      type: object
      additionalProperties: true
      nullable: true
    artifacts:
      type: array
      items:
        type: object
        additionalProperties: true
    result:
      type: object
      additionalProperties: true
      nullable: true
    metadata:
      type: object
      additionalProperties: true
      nullable: true
    error: { $ref: '#/ResultError', nullable: true }
RunNodesList:
  type: array
  items: { $ref: '#/RunNodeStatus' }
Workflow:
  type: object
  additionalProperties: false
  required: [id, schemaVersion, nodes, edges]
  properties:
    id:
      type: string
      description: Workflow UUID
    schemaVersion:
      type: string
      description: e.g. "2025-10"
      pattern: '^[0-9]{4}-[0-9]{2}$'
    metadata:
      $ref: '#/WorkflowMetadata'
    nodes:
      type: array
      minItems: 1
      items: { $ref: '#/WorkflowNode' }
    edges:
      type: array
      minItems: 0
      items: { $ref: '#/WorkflowEdge' }
    runtimes:
      type: object
      description: Runtime hints keyed by runtime name
      additionalProperties:
        type: object
        properties:
          workerHints:
            type: object
            properties:
              package: { type: string }
              minVersion: { type: string }
            additionalProperties: true
    tags:
      type: array
      items: { type: string }
WorkflowRef:
  type: object
  required: [workflowId]
  properties:
    workflowId: { type: string }
WorkflowList:
  type: object
  required: [items]
  properties:
    items:
      type: array
      items: { $ref: '#/Workflow' }
    nextCursor:
      type: string
      nullable: true
WorkflowMetadata:
  type: object
  additionalProperties: false
  properties:
    name: { type: string }
    description: { type: string }
    tags:
      type: array
      items: { type: string }
    environment: { type: string }
  required: [name]
WorkflowNode:
  type: object
  additionalProperties: false
  required: [id, type, label, position]
  properties:
    id: { type: string, description: Node UUID }
    type: { type: string, description: e.g. "playwright.open_page" }
    package:
      $ref: '#/NodePackage'
    label: { type: string }
    position:
      type: object
      required: [x, y]
      additionalProperties: false
      properties:
        x: { type: number }
        y: { type: number }
    parameters:
      type: object
      description: Free-form parameter payload
      additionalProperties: true
    results:
      type: object
      description: Most recent execution echo by worker
      additionalProperties: true
      properties:
        status:
          type: string
          description: Worker-level node status echo
          enum: [PENDING, RUNNING, SUCCEEDED, FAILED]
        done:
          type: boolean
          default: false
    schema:
      type: object
      description: Optional JSON Schemas for parameters/results
      additionalProperties: true
      properties:
        parameters: { type: object, additionalProperties: true }
        results: { type: object, additionalProperties: true }
    ui:
      $ref: '#/NodeUI'
NodePackage:
  type: object
  additionalProperties: false
  required: [name, version]
  properties:
    name: { type: string }
    version: { type: string }
NodeUI:
  type: object
  additionalProperties: false
  properties:
    inputPorts:
      type: array
      items: { $ref: '#/UIPort' }
    outputPorts:
      type: array
      items: { $ref: '#/UIPort' }
    widgets:
      type: array
      items: { $ref: '#/UIWidget' }
UIPort:
  type: object
  additionalProperties: false
  required: [key, label, binding]
  properties:
    key: { type: string }
    label: { type: string }
    binding:
      $ref: '#/UIBinding'
UIBinding:
  type: object
  additionalProperties: false
  required: [path, mode]
  properties:
    path: { type: string, description: e.g., parameters.url / results.status }
    mode:
      type: string
      enum: [read, write, two_way]
UIWidget:
  type: object
  additionalProperties: false
  required: [key, label, component, binding]
  properties:
    key: { type: string }
    label: { type: string }
    component:
      type: string
      description: string|number|enum|json...
    binding:
      $ref: '#/UIBinding'
    options:
      type: object
      additionalProperties: true
      properties:
        placeholder: { type: string }
        helpText: { type: string }
        required: { type: boolean }
        readOnly: { type: boolean }
        collapsed: { type: boolean }
        min: { type: number }
        max: { type: number }
        step: { type: number }
        options:
          description: Enum options; strings or {label,value} pairs
          oneOf:
            - type: array
              items: { type: string }
            - type: array
              items:
                type: object
                additionalProperties: false
                required: [label, value]
                properties:
                  label: { type: string }
                  value: { type: string }
WorkflowEdge:
  type: object
  additionalProperties: false
  required: [id, source, target]
  properties:
    id: { type: string }
    source:
      $ref: '#/EdgeEndpoint'
    target:
      $ref: '#/EdgeEndpoint'
EdgeEndpoint:
  type: object
  additionalProperties: false
  required: [node, port]
  properties:
    node: { type: string, description: Node UUID }
    port: { type: string, description: Port key defined by the node UI }
NodeList:
  type: object
  additionalProperties: false
  required: [items]
  properties:
    items:
      type: array
      items: { $ref: '#/NodeSummary' }
    nextCursor:
      type: string
      nullable: true
NodeSummary:
  type: object
  additionalProperties: false
  required: [type, status, category, label]
  properties:
    type: { type: string, description: Unique type id, e.g., playwright.open_page }
    status: { type: string, enum: [draft, published, deprecated] }
    category: { type: string }
    label: { type: string }
    description: { type: string }
    tags: { type: array, items: { type: string } }
NodeDefinition:
  type: object
  additionalProperties: false
  required: [type, status, category, label, schema]
  properties:
    type: { type: string }
    status: { type: string, enum: [draft, published, deprecated] }
    category: { type: string }
    label: { type: string }
    description: { type: string }
    tags: { type: array, items: { type: string } }
    runtimes:
      type: object
      description: Implementation declarations per runtime namespace
      additionalProperties:
        type: object
        additionalProperties: false
        properties:
          config:
            type: object
            description: Runtime default config
            additionalProperties: true
          handler:
            type: string
            description: Entry handler name in runtime
    schema:
      type: object
      additionalProperties: false
      properties:
        parameters:
          type: object
          description: JSON Schema (parameters)
          additionalProperties: true
        results:
          type: object
          description: JSON Schema (results)
          additionalProperties: true
      required: [parameters, results]
    ui:
      $ref: '#/NodeUI'
    conditions:
      type: object
      description: "Reserved: gating rules / pre-run checks"
      additionalProperties: true
    extensions:
      type: object
      description: "Reserved: extensibility hooks"
      additionalProperties: true
    metadata:
      type: object
      description: "Reserved: docs, example links, observability tags"
      additionalProperties: true
NodeCategoryList:
  type: object
  required: [items]
  properties:
    items:
      type: array
      items:
        type: object
        additionalProperties: false
        required: [id, title]
        properties:
          id: { type: string }
          title: { type: string }
          order: { type: integer, default: 0 }
Worker:
  type: object
  required: [id, lastHeartbeatAt, queues]
  properties:
    id: { type: string }
    hostname: { type: string }
    lastHeartbeatAt: { type: string, format: date-time }
    queues: { type: array, items: { type: string } }
    packages:
      type: array
      items:
        type: object
        properties:
          name: { type: string }
          version: { type: string }
          status:
            type: string
            enum: [installed, installing, uninstalling, removed, failed, unknown]
    meta: { type: object, additionalProperties: true }
WorkerCommand:
  type: object
  oneOf:
    - properties: { type: { const: 'drain' } }
      required: [type]
    - properties: { type: { const: 'rebind' }, queue: { type: string } }
      required: [type, queue]
    - properties: { type: { const: 'pkg.install' }, name: { type: string }, version: { type: string } }
      required: [type, name]
    - properties: { type: { const: 'pkg.uninstall' }, name: { type: string } }
      required: [type, name]
  additionalProperties: false
CommandRef:
  type: object
  required: [commandId, workerId, acceptedAt]
  properties:
    commandId: { type: string }
    workerId: { type: string }
    acceptedAt: { type: string, format: date-time }
EventType:
  type: string
  enum:
    - worker.heartbeat
    - worker.status
    - worker.package
    - run.dispatch
    - run.result
    - run.error
    - command.ack
    - command.error
EventEnvelope:
  type: object
  required: [type, ts, id, payload]
  properties:
    type: { $ref: '#/EventType' }
    ts: { type: string, format: date-time }
    id: { type: string, description: Monotonic event id for resume }
    tenant: { type: string, nullable: true }
    payload: { $ref: '#/WsPayload' }
WsPayload:
  oneOf:
    - $ref: '#/CmdDispatch'
    - $ref: '#/NodeResult'
    - $ref: '#/NodeError'
    - $ref: '#/WorkerHeartbeat'
    - $ref: '#/WorkerPackageEvent'
    - $ref: '#/CommandAck'
    - $ref: '#/CommandError'
CmdDispatch:
  type: object
  required: [kind, runId, nodeId, trace, definitionHash]
  properties:
    kind: { const: 'cmd.dispatch' }
    runId: { type: string }
    nodeId: { type: string }
    definitionHash: { type: string }
    trace: { $ref: '#/TraceContext' }
    payload: { type: object, additionalProperties: true }
NodeResult:
  type: object
  required: [kind, runId, nodeId, status, definitionHash]
  properties:
    kind: { const: 'result' }
    runId: { type: string }
    nodeId: { type: string }
    status: { type: string, enum: [succeeded, failed] }
    definitionHash: { type: string }
    outputs: { type: object, additionalProperties: true }
    metadata:
      type: object
      properties:
        error: { $ref: '#/ResultError', nullable: true }
        lease: { type: object, additionalProperties: true, nullable: true }
        trace: { $ref: '#/TraceContext', nullable: true }
NodeError:
  type: object
  required: [kind, runId, nodeId, error, definitionHash]
  properties:
    kind: { const: 'error' }
    runId: { type: string }
    nodeId: { type: string }
    definitionHash: { type: string }
    error: { $ref: '#/ResultError' }
    metadata:
      type: object
      properties:
        trace: { $ref: '#/TraceContext', nullable: true }
WorkerHeartbeat:
  type: object
  properties:
    kind: { const: 'worker.heartbeat' }
    workerId: { type: string }
    at: { type: string, format: date-time }
    queues: { type: array, items: { type: string } }
WorkerPackageEvent:
  type: object
  properties:
    kind: { const: 'worker.package' }
    workerId: { type: string }
    name: { type: string }
    version: { type: string, nullable: true }
    status:
      type: string
      enum: [installing, installed, uninstalling, removed, failed]
    message: { type: string, nullable: true }
CommandAck:
  type: object
  properties:
    kind: { const: 'command.ack' }
    commandId: { type: string }
    workerId: { type: string }
    receivedAt: { type: string, format: date-time }
CommandError:
  type: object
  properties:
    kind: { const: 'command.error' }
    commandId: { type: string }
    workerId: { type: string }
    error: { $ref: '#/ResultError' }
TraceContext:
  type: object
  required: [traceId, spanId]
  properties:
    traceId: { type: string }
    spanId: { type: string }
    parentSpanId: { type: string, nullable: true }
    baggage:
      type: object
      additionalProperties: { type: string }
      nullable: true
ResultError:
  type: object
  required: [code, message]
  properties:
    code: { type: string }
    message: { type: string }
    details:
      type: object
      additionalProperties: true
      nullable: true
Error:
  type: object
  required: [error, message]
  properties:
    error: { type: string }
    message: { type: string }
    requestId: { type: string }
    details:
      type: object
      additionalProperties: true
      nullable: true
