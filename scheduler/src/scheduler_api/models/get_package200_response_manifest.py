# coding: utf-8

"""
    Scheduler Public API (v1)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from scheduler_api.models.get_package200_response_manifest_adapters_inner import GetPackage200ResponseManifestAdaptersInner
from scheduler_api.models.get_package200_response_manifest_hooks import GetPackage200ResponseManifestHooks
from scheduler_api.models.get_package200_response_manifest_nodes_inner import GetPackage200ResponseManifestNodesInner
from scheduler_api.models.get_package200_response_manifest_python import GetPackage200ResponseManifestPython
from scheduler_api.models.get_package200_response_manifest_resources_inner import GetPackage200ResponseManifestResourcesInner
from scheduler_api.models.get_package200_response_manifest_signature import GetPackage200ResponseManifestSignature
from scheduler_api.models.object import object
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetPackage200ResponseManifest(object):
    """
    GetPackage200ResponseManifest
    """ # noqa: E501
    schema_version: Annotated[str, Field(strict=True)] = Field(description="Manifest schema version (semver).", alias="schemaVersion")
    name: Annotated[str, Field(strict=True)] = Field(description="Package identifier (lowercase with dots/underscores).")
    version: Annotated[str, Field(strict=True)] = Field(description="Package version in semver format.")
    description: StrictStr = Field(description="Short summary of the package.")
    adapters: Annotated[List[GetPackage200ResponseManifestAdaptersInner], Field(min_length=1)]
    python: GetPackage200ResponseManifestPython
    nodes: Annotated[List[GetPackage200ResponseManifestNodesInner], Field(min_length=1)]
    resources: Optional[List[GetPackage200ResponseManifestResourcesInner]] = None
    hooks: Optional[GetPackage200ResponseManifestHooks] = None
    signature: Optional[GetPackage200ResponseManifestSignature] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["schemaVersion", "name", "version", "description", "adapters", "python", "nodes", "resources", "hooks", "signature"]

    @field_validator('schema_version')
    def schema_version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]+\.[0-9]+\.[0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+\.[0-9]+\.[0-9]+$/")
        return value

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9]+([._-][a-z0-9]+)*$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9]+([._-][a-z0-9]+)*$/")
        return value

    @field_validator('version')
    def version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]+\.[0-9]+\.[0-9]+(?:[-+][0-9A-Za-z\.-]+)?$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+\.[0-9]+\.[0-9]+(?:[-+][0-9A-Za-z\.-]+)?$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetPackage200ResponseManifest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in adapters (list)
        _items = []
        if self.adapters:
            for _item in self.adapters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['adapters'] = _items
        # override the default output from pydantic by calling `to_dict()` of python
        if self.python:
            _dict['python'] = self.python.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item in self.nodes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item in self.resources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of hooks
        if self.hooks:
            _dict['hooks'] = self.hooks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signature
        if self.signature:
            _dict['signature'] = self.signature.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetPackage200ResponseManifest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schemaVersion": obj.get("schemaVersion"),
            "name": obj.get("name"),
            "version": obj.get("version"),
            "description": obj.get("description"),
            "adapters": [GetPackage200ResponseManifestAdaptersInner.from_dict(_item) for _item in obj.get("adapters")] if obj.get("adapters") is not None else None,
            "python": GetPackage200ResponseManifestPython.from_dict(obj.get("python")) if obj.get("python") is not None else None,
            "nodes": [GetPackage200ResponseManifestNodesInner.from_dict(_item) for _item in obj.get("nodes")] if obj.get("nodes") is not None else None,
            "resources": [GetPackage200ResponseManifestResourcesInner.from_dict(_item) for _item in obj.get("resources")] if obj.get("resources") is not None else None,
            "hooks": GetPackage200ResponseManifestHooks.from_dict(obj.get("hooks")) if obj.get("hooks") is not None else None,
            "signature": GetPackage200ResponseManifestSignature.from_dict(obj.get("signature")) if obj.get("signature") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


