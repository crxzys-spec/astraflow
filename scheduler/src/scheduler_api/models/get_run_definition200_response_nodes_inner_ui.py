# coding: utf-8

"""
    Scheduler Public API (v1)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from scheduler_api.models.get_run_definition200_response_nodes_inner_ui_widgets_inner import GetRunDefinition200ResponseNodesInnerUiWidgetsInner
from scheduler_api.models.object import object
from scheduler_api.models.start_run_request_workflow_nodes_inner_ui_output_ports_inner import StartRunRequestWorkflowNodesInnerUiOutputPortsInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetRunDefinition200ResponseNodesInnerUi(object):
    """
    GetRunDefinition200ResponseNodesInnerUi
    """ # noqa: E501
    input_ports: Optional[List[StartRunRequestWorkflowNodesInnerUiOutputPortsInner]] = Field(default=None, alias="inputPorts")
    output_ports: Optional[List[StartRunRequestWorkflowNodesInnerUiOutputPortsInner]] = Field(default=None, alias="outputPorts")
    widgets: Optional[List[GetRunDefinition200ResponseNodesInnerUiWidgetsInner]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["inputPorts", "outputPorts", "widgets"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetRunDefinition200ResponseNodesInnerUi from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in input_ports (list)
        _items = []
        if self.input_ports:
            for _item in self.input_ports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['inputPorts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in output_ports (list)
        _items = []
        if self.output_ports:
            for _item in self.output_ports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['outputPorts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in widgets (list)
        _items = []
        if self.widgets:
            for _item in self.widgets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['widgets'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetRunDefinition200ResponseNodesInnerUi from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inputPorts": [StartRunRequestWorkflowNodesInnerUiOutputPortsInner.from_dict(_item) for _item in obj.get("inputPorts")] if obj.get("inputPorts") is not None else None,
            "outputPorts": [StartRunRequestWorkflowNodesInnerUiOutputPortsInner.from_dict(_item) for _item in obj.get("outputPorts")] if obj.get("outputPorts") is not None else None,
            "widgets": [GetRunDefinition200ResponseNodesInnerUiWidgetsInner.from_dict(_item) for _item in obj.get("widgets")] if obj.get("widgets") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


