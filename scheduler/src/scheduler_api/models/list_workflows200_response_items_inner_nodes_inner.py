# coding: utf-8

"""
    Scheduler Public API (v1)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from scheduler_api.models.list_workflows200_response_items_inner_nodes_inner_position import ListWorkflows200ResponseItemsInnerNodesInnerPosition
from scheduler_api.models.list_workflows200_response_items_inner_nodes_inner_results import ListWorkflows200ResponseItemsInnerNodesInnerResults
from scheduler_api.models.list_workflows200_response_items_inner_nodes_inner_ui import ListWorkflows200ResponseItemsInnerNodesInnerUi
from scheduler_api.models.object import object
from scheduler_api.models.start_run_request_workflow_nodes_inner_package import StartRunRequestWorkflowNodesInnerPackage
from scheduler_api.models.start_run_request_workflow_nodes_inner_schema import StartRunRequestWorkflowNodesInnerSchema
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ListWorkflows200ResponseItemsInnerNodesInner(object):
    """
    ListWorkflows200ResponseItemsInnerNodesInner
    """ # noqa: E501
    id: StrictStr = Field(description="Node UUID")
    type: StrictStr = Field(description="e.g. \"playwright.open_page\"")
    package: Optional[StartRunRequestWorkflowNodesInnerPackage] = None
    label: StrictStr
    position: ListWorkflows200ResponseItemsInnerNodesInnerPosition
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="Free-form parameter payload")
    results: Optional[ListWorkflows200ResponseItemsInnerNodesInnerResults] = None
    var_schema: Optional[StartRunRequestWorkflowNodesInnerSchema] = Field(default=None, alias="schema")
    ui: Optional[ListWorkflows200ResponseItemsInnerNodesInnerUi] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "package", "label", "position", "parameters", "results", "schema", "ui"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ListWorkflows200ResponseItemsInnerNodesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of package
        if self.package:
            _dict['package'] = self.package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of results
        if self.results:
            _dict['results'] = self.results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ui
        if self.ui:
            _dict['ui'] = self.ui.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ListWorkflows200ResponseItemsInnerNodesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "package": StartRunRequestWorkflowNodesInnerPackage.from_dict(obj.get("package")) if obj.get("package") is not None else None,
            "label": obj.get("label"),
            "position": ListWorkflows200ResponseItemsInnerNodesInnerPosition.from_dict(obj.get("position")) if obj.get("position") is not None else None,
            "parameters": obj.get("parameters"),
            "results": ListWorkflows200ResponseItemsInnerNodesInnerResults.from_dict(obj.get("results")) if obj.get("results") is not None else None,
            "schema": StartRunRequestWorkflowNodesInnerSchema.from_dict(obj.get("schema")) if obj.get("schema") is not None else None,
            "ui": ListWorkflows200ResponseItemsInnerNodesInnerUi.from_dict(obj.get("ui")) if obj.get("ui") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


