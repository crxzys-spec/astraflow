# coding: utf-8

"""
    Scheduler Public API (v1)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401



from pydantic import ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from scheduler_api.models.object import object
from scheduler_api.models.send_worker_command_request_one_of import SendWorkerCommandRequestOneOf
from scheduler_api.models.send_worker_command_request_one_of1 import SendWorkerCommandRequestOneOf1
from scheduler_api.models.send_worker_command_request_one_of2 import SendWorkerCommandRequestOneOf2
from scheduler_api.models.send_worker_command_request_one_of3 import SendWorkerCommandRequestOneOf3
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

SENDWORKERCOMMANDREQUEST_ONE_OF_SCHEMAS = ["SendWorkerCommandRequestOneOf", "SendWorkerCommandRequestOneOf1", "SendWorkerCommandRequestOneOf2", "SendWorkerCommandRequestOneOf3"]

class SendWorkerCommandRequest(object):
    """
    SendWorkerCommandRequest
    """
    # data type: SendWorkerCommandRequestOneOf
    oneof_schema_1_validator: Optional[SendWorkerCommandRequestOneOf] = None
    # data type: SendWorkerCommandRequestOneOf1
    oneof_schema_2_validator: Optional[SendWorkerCommandRequestOneOf1] = None
    # data type: SendWorkerCommandRequestOneOf2
    oneof_schema_3_validator: Optional[SendWorkerCommandRequestOneOf2] = None
    # data type: SendWorkerCommandRequestOneOf3
    oneof_schema_4_validator: Optional[SendWorkerCommandRequestOneOf3] = None
    actual_instance: Optional[Union[SendWorkerCommandRequestOneOf, SendWorkerCommandRequestOneOf1, SendWorkerCommandRequestOneOf2, SendWorkerCommandRequestOneOf3]] = None
    one_of_schemas: List[str] = Literal["SendWorkerCommandRequestOneOf", "SendWorkerCommandRequestOneOf1", "SendWorkerCommandRequestOneOf2", "SendWorkerCommandRequestOneOf3"]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SendWorkerCommandRequest.model_construct()
        error_messages = []
        match = 0
        # validate data type: SendWorkerCommandRequestOneOf
        if not isinstance(v, SendWorkerCommandRequestOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendWorkerCommandRequestOneOf`")
        else:
            match += 1
        # validate data type: SendWorkerCommandRequestOneOf1
        if not isinstance(v, SendWorkerCommandRequestOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendWorkerCommandRequestOneOf1`")
        else:
            match += 1
        # validate data type: SendWorkerCommandRequestOneOf2
        if not isinstance(v, SendWorkerCommandRequestOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendWorkerCommandRequestOneOf2`")
        else:
            match += 1
        # validate data type: SendWorkerCommandRequestOneOf3
        if not isinstance(v, SendWorkerCommandRequestOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendWorkerCommandRequestOneOf3`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SendWorkerCommandRequest with oneOf schemas: SendWorkerCommandRequestOneOf, SendWorkerCommandRequestOneOf1, SendWorkerCommandRequestOneOf2, SendWorkerCommandRequestOneOf3. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SendWorkerCommandRequest with oneOf schemas: SendWorkerCommandRequestOneOf, SendWorkerCommandRequestOneOf1, SendWorkerCommandRequestOneOf2, SendWorkerCommandRequestOneOf3. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SendWorkerCommandRequestOneOf
        try:
            instance.actual_instance = SendWorkerCommandRequestOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendWorkerCommandRequestOneOf1
        try:
            instance.actual_instance = SendWorkerCommandRequestOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendWorkerCommandRequestOneOf2
        try:
            instance.actual_instance = SendWorkerCommandRequestOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SendWorkerCommandRequestOneOf3
        try:
            instance.actual_instance = SendWorkerCommandRequestOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SendWorkerCommandRequest with oneOf schemas: SendWorkerCommandRequestOneOf, SendWorkerCommandRequestOneOf1, SendWorkerCommandRequestOneOf2, SendWorkerCommandRequestOneOf3. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SendWorkerCommandRequest with oneOf schemas: SendWorkerCommandRequestOneOf, SendWorkerCommandRequestOneOf1, SendWorkerCommandRequestOneOf2, SendWorkerCommandRequestOneOf3. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


