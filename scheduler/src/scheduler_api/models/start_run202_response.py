# coding: utf-8

"""
    Scheduler Public API (v1)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class StartRun202Response(BaseModel):
    """
    StartRun202Response
    """ # noqa: E501
    run_id: StrictStr = Field(alias="runId")
    status: StrictStr
    definition_hash: StrictStr = Field(alias="definitionHash")
    client_id: StrictStr = Field(alias="clientId")
    created_at: datetime = Field(alias="createdAt")
    __properties: ClassVar[List[str]] = ["runId", "status", "definitionHash", "clientId", "createdAt"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('queued', 'running', 'succeeded', 'failed', 'cancelled',):
            raise ValueError("must be one of enum values ('queued', 'running', 'succeeded', 'failed', 'cancelled')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StartRun202Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StartRun202Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "runId": obj.get("runId"),
            "status": obj.get("status"),
            "definitionHash": obj.get("definitionHash"),
            "clientId": obj.get("clientId"),
            "createdAt": obj.get("createdAt")
        })
        return _obj


