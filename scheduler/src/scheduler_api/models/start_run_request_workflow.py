# coding: utf-8

"""
    Scheduler Public API (v1)

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from scheduler_api.models.object import object
from scheduler_api.models.start_run_request_workflow_edges_inner import StartRunRequestWorkflowEdgesInner
from scheduler_api.models.start_run_request_workflow_metadata import StartRunRequestWorkflowMetadata
from scheduler_api.models.start_run_request_workflow_nodes_inner import StartRunRequestWorkflowNodesInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class StartRunRequestWorkflow(object):
    """
    StartRunRequestWorkflow
    """ # noqa: E501
    id: StrictStr = Field(description="Workflow UUID")
    schema_version: Annotated[str, Field(strict=True)] = Field(description="e.g. \"2025-10\"", alias="schemaVersion")
    metadata: StartRunRequestWorkflowMetadata
    nodes: Annotated[List[StartRunRequestWorkflowNodesInner], Field(min_length=1)]
    edges: Annotated[List[StartRunRequestWorkflowEdgesInner], Field(min_length=0)]
    tags: Optional[List[StrictStr]] = Field(default=None, description="Workflow-level tags.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "schemaVersion", "metadata", "nodes", "edges", "tags"]

    @field_validator('schema_version')
    def schema_version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]{4}-[0-9]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-[0-9]{2}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StartRunRequestWorkflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item in self.nodes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in edges (list)
        _items = []
        if self.edges:
            for _item in self.edges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['edges'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StartRunRequestWorkflow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "schemaVersion": obj.get("schemaVersion"),
            "metadata": StartRunRequestWorkflowMetadata.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "nodes": [StartRunRequestWorkflowNodesInner.from_dict(_item) for _item in obj.get("nodes")] if obj.get("nodes") is not None else None,
            "edges": [StartRunRequestWorkflowEdgesInner.from_dict(_item) for _item in obj.get("edges")] if obj.get("edges") is not None else None,
            "tags": obj.get("tags")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


