# generated by datamodel-codegen:
#   filename:  manifest.json

from __future__ import annotations

from enum import Enum
from typing import Any, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, constr


class Adapter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(..., description='Unique adapter name within the package.')
    entrypoint: constr(pattern=r'^[A-Za-z_][A-Za-z0-9_.]*$') = Field(
        ..., description='Python module path containing adapter handlers.'
    )
    capabilities: list[str] = Field(
        ...,
        description='Capabilities registered by this adapter (used for dispatch).',
        min_length=1,
    )
    description: Optional[str] = Field(None, description='Adapter level description.')
    idempotency: Optional[str] = Field(
        None, description='Idempotency guarantees of the adapter (e.g. per_request).'
    )
    metadata: Optional[dict[str, Any]] = Field(
        None, description='Additional adapter specific metadata.'
    )


class PythonConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    requires: str = Field(..., description='Python version requirement specifier.')
    dependencies: Optional[list[str]] = Field(
        [], description='Pip requirement specifiers installed during package setup.'
    )


class Status(Enum):
    draft = 'draft'
    published = 'published'
    deprecated = 'deprecated'


class Mode(Enum):
    read = 'read'
    write = 'write'
    two_way = 'two_way'


class Binding(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    path: str = Field(
        ..., description='JSON pointer style path targeted by the binding.'
    )
    mode: Optional[Mode] = Field(
        'write', description='Binding mode that describes read/write behaviour.'
    )


class Resource(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    path: str = Field(..., description='Relative path to the bundled resource.')
    type: str = Field(
        ..., description='Resource type (download, archive, script, etc.).'
    )
    sha256: Optional[constr(pattern=r'^[A-Fa-f0-9]{64}$')] = Field(
        None, description='Optional checksum of the resource content.'
    )


class Hooks(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    install: Optional[list[str]] = Field(
        [], description='Scripts executed during install.'
    )
    uninstall: Optional[list[str]] = Field(
        [], description='Scripts executed during uninstall.'
    )


class Signature(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sha256: Optional[constr(pattern=r'^[A-Fa-f0-9]{64}$')] = Field(
        None, description='SHA-256 hash of the archive or manifest.'
    )
    signedAt: Optional[str] = Field(
        None, description='Timestamp when the manifest was signed.'
    )
    signedBy: Optional[str] = Field(None, description='Identity of the signer.')


class JsonSchema(RootModel[Union[dict[str, Any], bool]]):
    root: Union[dict[str, Any], bool] = Field(
        ..., description='Embedded JSON Schema definition.'
    )


class Port(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(..., description='Stable identifier for the port.')
    label: str = Field(..., description='Display label for the port.')
    binding: Binding


class Widget(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(..., description='Unique widget key.')
    label: str = Field(..., description='Widget label.')
    component: str = Field(..., description='Component type rendered by the dashboard.')
    binding: Binding
    options: Optional[dict[str, Any]] = Field(
        None, description='Component options (schema depends on component).'
    )


class NodeUI(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    inputPorts: Optional[list[Port]] = []
    widgets: Optional[list[Widget]] = []


class Node(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: constr(pattern=r'^[A-Za-z0-9_.-]+$') = Field(
        ..., description='Fully qualified node type (package scoped).'
    )
    status: Status = Field(..., description='Lifecycle state of the node.')
    category: str = Field(
        ..., description='Grouping category displayed in the builder palette.'
    )
    label: str = Field(
        ..., description='Human readable label rendered in the palette and inspector.'
    )
    description: Optional[str] = Field(
        None, description='Extended description of the node behaviour.'
    )
    tags: Optional[list[str]] = Field(
        None, description='Free-form tags for searching/filtering.'
    )
    adapter: constr(pattern=r'^[A-Za-z0-9_.-]+$') = Field(
        ..., description='Adapter name responsible for the node implementation.'
    )
    handler: constr(pattern=r'^[A-Za-z_][A-Za-z0-9_]*$') = Field(
        ..., description='Handler callable exposed by the adapter.'
    )
    config: Optional[dict[str, Any]] = Field(
        {}, description='Optional static configuration forwarded to the handler.'
    )
    schema_: JsonSchema = Field(
        ...,
        alias='schema',
        description='JSON Schema describing node parameters/results.',
    )
    ui: Optional[NodeUI] = None


class PackageManifest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    schemaVersion: constr(pattern=r'^[0-9]+\.[0-9]+\.[0-9]+$') = Field(
        ..., description='Manifest schema version (semver).'
    )
    name: constr(pattern=r'^[a-z0-9]+([._-][a-z0-9]+)*$') = Field(
        ..., description='Package identifier (lowercase with dots/underscores).'
    )
    version: constr(pattern=r'^[0-9]+\.[0-9]+\.[0-9]+(?:[-+][0-9A-Za-z.-]+)?$') = Field(
        ..., description='Package version in semver format.'
    )
    description: str = Field(..., description='Short summary of the package.')
    adapters: list[Adapter] = Field(
        ..., description='Adapter modules exposed by the package.', min_length=1
    )
    python: PythonConfig
    nodes: list[Node] = Field(
        ...,
        description='Node definitions surfaced to the builder and scheduler.',
        min_length=1,
    )
    resources: Optional[list[Resource]] = Field(
        [], description='Static assets bundled with the package.'
    )
    hooks: Optional[Hooks] = None
    signature: Optional[Signature] = None
