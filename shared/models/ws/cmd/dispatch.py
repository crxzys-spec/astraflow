# generated by datamodel-codegen:
#   filename:  cmd.dispatch.schema.json

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, conint, constr


class Constraints(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    timeout_ms: Optional[conint(ge=1)] = None


class ResourceRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    resource_id: constr(min_length=1)
    worker_id: constr(min_length=1)
    type: constr(min_length=1)
    scope: Optional[constr(min_length=1)] = None
    expires_at: Optional[AwareDatetime] = None
    metadata: Optional[Dict[str, Any]] = None


class Mode(Enum):
    sticky = 'sticky'
    preferred = 'preferred'


class Affinity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: constr(min_length=1)
    mode: Optional[Mode] = None
    expires_at: Optional[AwareDatetime] = None


class CommandDispatchPayload(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    run_id: constr(min_length=1)
    task_id: constr(min_length=1)
    priority: Optional[int] = None
    node_id: constr(min_length=1)
    node_type: constr(min_length=1)
    package_name: constr(min_length=1)
    package_version: constr(min_length=1)
    parameters: Dict[str, Any]
    constraints: Constraints
    concurrency_key: Optional[constr(min_length=1)] = None
    resource_refs: Optional[List[ResourceRef]] = Field(
        None,
        description='Resources that must exist on the selected worker before executing the command.',
    )
    affinity: Optional[Affinity] = Field(
        None, description='Scheduler hint to keep related tasks on the same worker.'
    )
