# generated by datamodel-codegen:
#   filename:  envelope.schema.json

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, conint, constr


class Role(Enum):
    scheduler = 'scheduler'
    worker = 'worker'


class Sender(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    role: Role
    id: constr(min_length=1)


class Ack(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    for_: Optional[str] = Field(None, alias='for')
    request: Optional[bool] = None


class WsEnvelope(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: constr(min_length=1)
    id: constr(min_length=1)
    ts: AwareDatetime
    corr: Optional[str] = None
    seq: Optional[conint(ge=0)] = None
    tenant: constr(min_length=1)
    sender: Sender
    ack: Optional[Ack] = None
    flags: Optional[List[constr(min_length=1)]] = None
    payload: Dict[str, Any]
