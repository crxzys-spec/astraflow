# generated by datamodel-codegen:
#   filename:  register.schema.json

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class Concurrency(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    max_parallel: conint(ge=1)
    per_node_limits: Optional[Dict[str, conint(ge=1)]] = None


class Runtime(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class Capabilities(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    concurrency: Concurrency
    runtimes: List[Runtime] = Field(..., min_length=1)
    features: List[constr(min_length=1)]


class Status(Enum):
    installed = 'installed'
    missing = 'missing'
    failed = 'failed'


class Package(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: constr(min_length=1)
    version: constr(min_length=1)
    status: Status


class RegisterPayload(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    capabilities: Capabilities
    packages: List[Package]
    channels: Optional[List[constr(min_length=1)]] = Field(
        None, description='Optional execution channels exposed by the worker'
    )
