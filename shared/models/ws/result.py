# generated by datamodel-codegen:
#   filename:  result.schema.json

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, conint, constr


class Status(Enum):
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    SKIPPED = 'SKIPPED'
    CANCELLED = 'CANCELLED'


class Error(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    code: constr(min_length=1)
    message: constr(min_length=1)
    remediation: Optional[str] = None


class Artifact(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    resource_id: constr(min_length=1)
    worker_id: constr(min_length=1)
    type: constr(min_length=1)
    size_bytes: Optional[conint(ge=0)] = None
    inline: Optional[bool] = None
    expires_at: Optional[AwareDatetime] = None
    metadata: Optional[Dict[str, Any]] = None


class ResultPayload(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    run_id: constr(min_length=1)
    task_id: constr(min_length=1)
    status: Status
    result: Dict[str, Any]
    duration_ms: Optional[conint(ge=0)] = None
    metadata: Optional[Dict[str, Any]] = None
    artifacts: Optional[List[Artifact]] = Field(
        None, description='Optional list of artifacts created by the task.'
    )
    error: Optional[Error] = None
